{"version":3,"names":[],"mappings":"","sources":["app-data/app-data.html"],"sourcesContent":["<link rel=\"import\" href=\"../../bower_components/polymer/polymer.html\">\n\n<link rel=\"import\" href=\"../../bower_components/iron-ajax/iron-ajax.html\">\n\n<dom-module id=\"app-data\">\n    <template>\n        <iron-ajax auto url=\"[[speakersSource]]\" handle-as=\"json\" last-response=\"{{_speakersRaw}}\"></iron-ajax>\n        <iron-ajax auto url=\"[[sessionsSource]]\" handle-as=\"json\" last-response=\"{{sessions}}\"></iron-ajax>\n        <iron-ajax auto url=\"[[postsSource]]\" handle-as=\"json\" last-response=\"{{posts}}\"></iron-ajax>\n        <iron-ajax auto url=\"[[partnersSource]]\" handle-as=\"json\" last-response=\"{{partners}}\"></iron-ajax>\n        <iron-ajax auto url=\"[[scheduleSource]]\" handle-as=\"json\" last-response=\"{{_scheduleRaw}}\"></iron-ajax>\n    </template>\n    <script>\n        (function() {\n            'use strict';\n\n            class AppData {\n                beforeRegister() {\n                    let is = this.constructor.name.replace(/\\W+/g, '-')\n                        .replace(/([a-z\\d])([A-Z])/g, '$1-$2').toLowerCase();\n                    this.is = is;\n                    this.properties = {\n                        speakersSource: {\n                            type: String,\n                            value: '/data/speakers.json'\n                        },\n                        // TODO\n                        // sessionsSource: {\n                        //     type: String,\n                        //     value: '/data/sessions.json'\n                        // },\n                        postsSource: {\n                            type: String,\n                            value: '/data/blog.json'\n                        },\n                        partnersSource: {\n                            type: String,\n                            value: '/data/partners.json'\n                        },\n                        // scheduleSource: {\n                        //     type: String,\n                        //     value: '/data/schedule.json'\n                        // },\n                        speakers: {\n                            type: Array,\n                            notify: true\n                        },\n                        // sessions: {\n                        //     type: Array,\n                        //     notify: true\n                        // },\n                        posts: {\n                            type: Array,\n                            notify: true\n                        },\n                        partners: {\n                            type: Array,\n                            notify: true\n                        },\n                        // schedule: {\n                        //     type: Array,\n                        //     notify: true\n                        // },\n                        videos: {\n                            type: Array,\n                            notify: true\n                        },\n                        _speakersRaw: Array,\n                        _scheduleRaw: Array,\n                        _tempVideos: {\n                            type: Array,\n                            value: []\n                        }\n                    };\n                    this.observers = [\n                        '_updateSpeakersData(_speakersRaw, sessions)',\n                        '_generateSchedule(speakers, sessions, _scheduleRaw)'\n                    ];\n                }\n\n                _updateSpeakersData() {\n                    for (var i = 0, speakersLen = this._speakersRaw.length; i < speakersLen; i++) {\n                        this._speakersRaw[i].sessions = [];\n                        for (var j = 0, sessionsLen = this.sessions.length; j < sessionsLen; j++) {\n                            if (this.sessions[j].speakers && this.sessions[j].speakers.indexOf(this._speakersRaw[i].id) > -1) {\n                                var tempSession = JSON.parse(JSON.stringify(this.sessions[j]));\n                                delete tempSession.speakers;\n                                this._speakersRaw[i].sessions.push(tempSession);\n                            }\n                        }\n                    }\n                    this.speakers = this._speakersRaw;\n                }\n\n                _generateSchedule() {\n                    for (var i = 0, scheduleLen = this._scheduleRaw.length; i < scheduleLen; i++) {\n                        var day = this._scheduleRaw[i];\n                        this._scheduleRaw[i].tags = [];\n                        for (var j = 0, timeslotsLen = day.timeslots.length; j < timeslotsLen; j++) {\n                            var timeslot = day.timeslots[j];\n                            for (var k = 0, sessionsLen = timeslot.sessions.length; k < sessionsLen; k++) {\n                                for (var l = 0, subSessionsLen = timeslot.sessions[k].length; l < subSessionsLen; l++) {\n                                    var session = this._getSession(timeslot.sessions[k][l], day);\n                                    if (session && !session.track) {\n                                        session.track = day.tracks[k];\n                                    }\n                                    session.startTime = timeslot.startTime;\n                                    session.endTime = subSessionsLen > 1 ? this._getEndTime(day.date, timeslot.startTime, timeslot.endTime, subSessionsLen, l + 1) : timeslot.endTime;\n                                    session.dateReadable = day.dateReadable;\n                                    this._scheduleRaw[i].timeslots[j].sessions[k][l] = session;\n                                }\n                            }\n                        }\n                    }\n                    this.schedule = this._scheduleRaw;\n                    this.videos = this._tempVideos;\n                }\n\n                _getSession(sessionId, day) {\n                    for (var i = 0, sessionsLen = this.sessions.length; i < sessionsLen; i++) {\n                        if (sessionId === this.sessions[i].id) {\n                            this.sessions[i].mainTag = this.sessions[i].tags ? this.sessions[i].tags[0] : 'General';\n\n                            if(day.tags.indexOf(this.sessions[i].mainTag) < 0) {\n                                day.tags.push(this.sessions[i].mainTag);\n                            }\n                            var speakers = [];\n                            if (this.sessions[i].speakers) {\n                                for (var j = 0, speakersLen = this.sessions[i].speakers.length; j < speakersLen; j++) {\n                                    if (!this.sessions[i].speakers[j].id) {\n                                        this.sessions[i].speakers[j] = this._getSpeaker(this.sessions[i].speakers[j]);\n                                        speakers.push(this.sessions[i].speakers[j].name);\n                                    }\n                                }\n                            }\n                            if(this.sessions[i].videoId) {\n                                this.push('_tempVideos', {\n                                    youtubeId: this.sessions[i].videoId,\n                                    title: this.sessions[i].title,\n                                    speakers: speakers.join(', '),\n                                    thumbnail: this.sessions[i].thumbnail\n                                });\n                            }\n                            return this.sessions[i];\n                        }\n                    }\n                }\n\n                _getSpeaker(speakerId) {\n                    for (var i = 0, speakersLen = this.speakers.length; i < speakersLen; i++) {\n                        if (speakerId === this.speakers[i].id) {\n                            return this.speakers[i];\n                        }\n                    }\n                }\n\n                _getEndTime(date, startTime, endTime, totalNumber, number) {\n                    var timezone = new Date().toString().match(/([A-Z]+[\\+-][0-9]+.*)/)[1],\n                        timeStart = new Date(date + ' ' + startTime + ' ' + timezone).getTime(),\n                        timeEnd = new Date(date + ' ' + endTime + ' ' + timezone).getTime(),\n                        difference = Math.floor((timeEnd - timeStart) / totalNumber),\n                        result = new Date(timeStart + difference * number);\n                    return result.getHours() + ':' + result.getMinutes();\n                }\n            }\n\n            Polymer(AppData);\n        })();\n    </script>\n</dom-module>\n"],"file":"app-data/app-data.html","sourceRoot":"/source/"}