{"version":3,"sources":["blocks/truncate-marked-text/truncate-marked-text.html"],"names":[],"mappings":";QACQ;YACI,qCAAqC;SACxC","file":"blocks/truncate-marked-text/truncate-marked-text.html","sourcesContent":["<link rel=\"import\" href=\"../../../bower_components/polymer/polymer.html\">\n\n<link rel=\"import\" href=\"../../../bower_components/marked-element/marked-element.html\">\n\n<dom-module id=\"truncate-marked-text\">\n    <style include=\"shared-styles\"></style>\n    <style>\n        .markdown-html {\n            @apply(--truncate-marked-text-style);\n        }\n    </style>\n    <template>\n        <marked-element markdown=\"[[_outputText]]\">\n            <div class=\"markdown-html\"></div>\n        </marked-element>\n    </template>\n    <script>\n        (function() {\n            'use strict';\n\n            class TruncateMarkedText {\n                beforeRegister() {\n                    let is = this.constructor.name.replace(/\\W+/g, '-')\n                        .replace(/([a-z\\d])([A-Z])/g, '$1-$2').toLowerCase();\n                    this.is = is;\n                    this.properties = {\n                        characters: Number,\n                        words: Number,\n                        breakLastWord: {\n                            type: Boolean,\n                            value: false\n                        },\n                        text: {\n                            type: String,\n                            observer: 'truncate'\n                        },\n                        _outputText: {\n                            type: String,\n                            notify: true\n                        }\n                    };\n                }\n\n                truncate() {\n                    if (this.words && !this.characters) {\n                        this._outputText = this._truncateByWords(this.text, this.words);\n                    } else {\n                        this._outputText = this._truncateByCharacters(this.text, this.characters, this.breakLastWord);\n                    }\n                }\n\n                _truncateByWords(input, words) {\n                    if (isNaN(words)) {\n                        return input;\n                    }\n                    if (words <= 0){\n                        return '';\n                    }\n                    if (input) {\n                        var inputWords = input.split(/\\s+/);\n                        if (inputWords.length > words) {\n                            input = inputWords.slice(0, words).join(' ') + '...';\n                        }\n                    }\n                    return input;\n                }\n\n                _truncateByCharacters(input, chars, breakOnWord) {\n                    if (isNaN(chars)) {\n                        return input;\n                    }\n                    if (chars <= 0) {\n                        return '';\n                    }\n                    if (input && input.length > chars) {\n                        input = input.trim().substring(0, chars);\n                        if (!breakOnWord) {\n                            var lastSpace = input.lastIndexOf(' ');\n                            if (lastSpace !== -1) {\n                                input = input.substr(0, lastSpace);\n                            }\n                        } else {\n                            while (input.charAt(input.length - 1) === ' ') {\n                                input = input.substr(0, input.length - 1);\n                            }\n                        }\n                        return input + '...';\n                    }\n                    return input;\n                }\n            }\n\n            Polymer(TruncateMarkedText);\n        })();\n    </script>\n</dom-module>\n"],"sourceRoot":"/source/"}